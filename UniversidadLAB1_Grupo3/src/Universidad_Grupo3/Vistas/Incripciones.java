/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Universidad_Grupo3.Vistas;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import Universidad_Grupo3.Entidades.*;
import Universidad_Grupo3.AccesoADatos.AlumnoData;
import Universidad_Grupo3.AccesoADatos.MateriaData;
import Universidad_Grupo3.AccesoADatos.InscripcionData;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author Hollmann
 */
public class Incripciones extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel();
//---------------------------CONSTRUCTOR------------------------------------

    /*
     * Creates new form Incripciones
     */
    public Incripciones() {
        initComponents();
        llenarCombo();
        limpiarCampo();
        armarTabla();
        jcInscriptas.setSelected(true);
        jbInscribir.setEnabled(false);
        jbAnular.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jlFormulario = new javax.swing.JLabel();
        jlSeleccion = new javax.swing.JLabel();
        jlListado = new javax.swing.JLabel();
        jcInscriptas = new javax.swing.JCheckBox();
        jcNoInscriptas = new javax.swing.JCheckBox();
        jcAlumno = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaMateria = new javax.swing.JTable();
        jbInscribir = new javax.swing.JButton();
        jbAnular = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jlFormulario.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlFormulario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlFormulario.setText("Formulario de Inscripcion");

        jlSeleccion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlSeleccion.setText("Seleccione un alumno:");

        jlListado.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlListado.setText("Listado de Materias");

        jcInscriptas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jcInscriptas.setText("Materias Inscriptas");
        jcInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcInscriptasActionPerformed(evt);
            }
        });

        jcNoInscriptas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jcNoInscriptas.setText("Materias no Incriptas");
        jcNoInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcNoInscriptasActionPerformed(evt);
            }
        });

        jcAlumno.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jcAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcAlumnoActionPerformed(evt);
            }
        });

        jtaMateria.setBackground(new java.awt.Color(255, 255, 255));
        jtaMateria.setForeground(new java.awt.Color(0, 0, 0));
        jtaMateria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nombre", "AÃ±o"
            }
        ));
        jScrollPane1.setViewportView(jtaMateria);

        jbInscribir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbInscribir.setText("Inscribir");
        jbInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInscribirActionPerformed(evt);
            }
        });

        jbAnular.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbAnular.setText("Anular Inscripcion");
        jbAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnularActionPerformed(evt);
            }
        });

        jbSalir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(jlFormulario))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(jlListado)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jlSeleccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jcInscriptas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jcNoInscriptas))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbInscribir)
                                .addGap(106, 106, 106)
                                .addComponent(jbAnular)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbSalir)))))
                .addGap(145, 145, 145))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jlFormulario)
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSeleccion)
                    .addComponent(jcAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(jlListado)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcNoInscriptas)
                    .addComponent(jcInscriptas))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbInscribir)
                    .addComponent(jbAnular)
                    .addComponent(jbSalir))
                .addGap(61, 61, 61))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcInscriptasActionPerformed
        jcNoInscriptas.setSelected(false);
        if(jcAlumno.getSelectedIndex() != -1){
            jbInscribir.setEnabled(false);
            jbAnular.setEnabled(true);
        }

        Alumno alumno = (Alumno) jcAlumno.getSelectedItem();
//        System.out.println("alumno=" + alumno);
        if (alumno == null) {
            borrarLista();
            return;
        }
        int idAlumno = alumno.getIdAlumno();
        InscripcionData inscripciones = new InscripcionData();
        List<Materia> materias = inscripciones.obtenerMateriasCursadas(idAlumno);
        llenarLista(materias);
        
        
    }//GEN-LAST:event_jcInscriptasActionPerformed

    private void jcNoInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcNoInscriptasActionPerformed
        jcInscriptas.setSelected(false);
        if(jcAlumno.getSelectedIndex() != -1){
            jbInscribir.setEnabled(true);
            jbAnular.setEnabled(false);
        }
        Alumno alumno = (Alumno) jcAlumno.getSelectedItem();
//        System.out.println("alumno=" + alumno);
        if (alumno == null) {
            borrarLista();
            return;
        }
        int idAlumno = alumno.getIdAlumno();
        InscripcionData inscripciones = new InscripcionData();
        List<Materia> materias = inscripciones.obtenerMateriasNOCursadas(idAlumno);
        llenarLista(materias);
    }//GEN-LAST:event_jcNoInscriptasActionPerformed

    private void jbInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInscribirActionPerformed
        Alumno alumno = (Alumno) jcAlumno.getSelectedItem();
        int idAlumno = alumno.getIdAlumno();
        if(idAlumno == -1){
            return;
        }
        
        InscripcionData inscripcionData = new InscripcionData();
        Integer[] idMaterias = getSelectedIdMaterias();
        MateriaData materiaData = new MateriaData();
        
        List<Materia> materias = new ArrayList<Materia>();
        for(Integer idMateria : idMaterias){
            System.out.println("idMateria=" + idMateria);
            if(idMateria !=  null){
                materias.add(materiaData.buscarMateria((int)idMateria));
            }
        }
        
        for(Materia materia: materias){
            if(materia != null){
                Inscripcion inscripcion = new Inscripcion(alumno, materia, 0);
                inscripcionData.guardarInscripcion(inscripcion);
            }
        }
        
        borrarLista();
        List<Materia> materiasNOCursadas = inscripcionData.obtenerMateriasNOCursadas(
                idAlumno);
        
        llenarLista(materiasNOCursadas);
    }//GEN-LAST:event_jbInscribirActionPerformed

    private void jcAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcAlumnoActionPerformed
        Alumno alumno = (Alumno) jcAlumno.getSelectedItem();
//        System.out.println("alumno=" + alumno);
        if (alumno == null) {
            borrarLista();
            if(jcAlumno.getSelectedIndex() != -1){
                jbInscribir.setEnabled(false);
                jbAnular.setEnabled(false);
            }
            return;
        }
        
        jcNoInscriptas.setSelected(false);
        if(jcNoInscriptas.isSelected()){
            jbInscribir.setEnabled(true);
            jbAnular.setEnabled(false);
        }
        
        if(jcInscriptas.isSelected()){
            jbInscribir.setEnabled(false);
            jbAnular.setEnabled(true);
        }
        
        int idAlumno = alumno.getIdAlumno();
        InscripcionData inscripciones = new InscripcionData();

        List<Materia> materias = null;
        if (jcInscriptas.isSelected()) {
            materias = inscripciones.obtenerMateriasCursadas(idAlumno);
        }
        if (!jcInscriptas.isSelected()) {
            materias = inscripciones.obtenerMateriasNOCursadas(idAlumno);
        }

        llenarLista(materias);

    }//GEN-LAST:event_jcAlumnoActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnularActionPerformed
        Alumno alumno = (Alumno) jcAlumno.getSelectedItem();
        int idAlumno = alumno.getIdAlumno();
        if(idAlumno == -1){
            return;
        }
        
        Integer[] idMaterias = getSelectedIdMaterias();
        InscripcionData inscripcionData = new InscripcionData();
        
        
        for(Integer idMateria : idMaterias){
            System.out.println("idMateria=" + idMateria);
            if(idMateria != null){
                inscripcionData.borrarInscripcionMateriaAlumno(idAlumno,
                                                                    idMateria);
            }
        }
        borrarLista();
        List<Materia> materias = inscripcionData.obtenerMateriasCursadas(
                idAlumno);
        
        llenarLista(materias);
    }//GEN-LAST:event_jbAnularActionPerformed

//-----------------------------METODOS-------------------------------------    
    private void llenarCombo() {
        Alumno jcItemNoSeleccionado = new Alumno();
        jcItemNoSeleccionado.setIdAlumno(-1);
        jcAlumno.addItem(jcItemNoSeleccionado);
        jcAlumno.setSelectedItem(jcItemNoSeleccionado);

        AlumnoData alumnoData = new AlumnoData();
        List<Alumno> alumnos = alumnoData.listarAlumnos();

        for (Alumno alumno : alumnos) {
            jcAlumno.addItem(alumno);
        }

    }

    private void limpiarCampo() {
        if (jcAlumno != null) {
            jcAlumno.setSelectedIndex(-1);
        }

    }

    private void armarTabla() {
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("AÃ±o");
        jtaMateria.setModel(modelo);

    }

    private void llenarLista(List<Materia> materias) {
        borrarLista();
//        System.out.println("llenarLista()");
        for (Materia materia : materias) {
//            System.out.println(materia);
            Vector<Object> renglon = new Vector<>();
            renglon.add(materia.getIdMateria());
            renglon.add(materia.getNombre());
            renglon.add(materia.getAnioMateria());

            modelo.addRow(renglon);
        }
        jtaMateria.repaint();
    }

    private void borrarLista() {
        int filas = modelo.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
        jtaMateria.repaint();
    }

    private Integer getIdTabla(int fila) {
        Object val = jtaMateria.getValueAt(fila, 0);
        if (val == null) {
            return null;
        }
        if (val instanceof Integer) {
            return (Integer) val;
        }
        return Integer.parseInt((String) val);
    }

    private String getNombreTabla(int fila) {
        Object val = jtaMateria.getValueAt(fila, 1);
        if (val == null) {
            return null;
        }
        if (val instanceof String) {
            return (String) val;
        }
        return (String) val;
    }

    private Integer getAnioTabla(int fila) {
        Object val = jtaMateria.getValueAt(fila, 2);
        if (val == null) {
            return null;
        }
        if (val instanceof Integer) {
            return (Integer) val;
        }
        return Integer.parseInt((String) val);
    }
    
    private Integer[] getSelectedIdMaterias(){
        int numFilas = modelo.getRowCount();
        if(numFilas < 1){
            return null;
        }
        int[] filasSeleccionadas = jtaMateria.getSelectedRows();
        System.out.println("filasSelccionadas.length=" + filasSeleccionadas.length);
        Integer[] idMaterias = new Integer[filasSeleccionadas.length];

        for (int i = 0; i < filasSeleccionadas.length; i++) {
            Object val = modelo.getValueAt(filasSeleccionadas[i], 0);
            Integer idMateria = null;
            if(val instanceof String){
                idMateria = Integer.valueOf((String)val);
            }else {
                idMaterias[i] = (Integer) val;
            }
            
        }

        return idMaterias;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAnular;
    private javax.swing.JButton jbInscribir;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcAlumno;
    private javax.swing.JCheckBox jcInscriptas;
    private javax.swing.JCheckBox jcNoInscriptas;
    private javax.swing.JLabel jlFormulario;
    private javax.swing.JLabel jlListado;
    private javax.swing.JLabel jlSeleccion;
    private javax.swing.JTable jtaMateria;
    // End of variables declaration//GEN-END:variables
}
