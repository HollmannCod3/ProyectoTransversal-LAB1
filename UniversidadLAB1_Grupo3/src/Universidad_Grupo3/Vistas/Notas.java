/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Universidad_Grupo3.Vistas;

import javax.swing.table.DefaultTableModel;
import Universidad_Grupo3.Entidades.*;
import Universidad_Grupo3.AccesoADatos.AlumnoData;
import Universidad_Grupo3.AccesoADatos.InscripcionData;
import Universidad_Grupo3.AccesoADatos.MateriaData;
import java.util.List;
import java.util.Vector;

/**
 *
 * @author Hollmann
 */
public class Notas extends javax.swing.JInternalFrame {
    private DefaultTableModel modelo = new DefaultTableModel();
    /**
     * Creates new form Notas
     */
    public Notas() {
        initComponents();
        llenarCombo();
        limpiarCampo();
        armarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jlNotas = new javax.swing.JLabel();
        jlSeleccionar = new javax.swing.JLabel();
        jcAlumno = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaMateria = new javax.swing.JTable();
        jbGuardar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jlNotas.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlNotas.setText("Carga de Notas");

        jlSeleccionar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlSeleccionar.setText("Seleccione un alumno:");

        jcAlumno.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jcAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcAlumnoActionPerformed(evt);
            }
        });

        jtaMateria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Código", "Nombre", "Nota"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtaMateria);

        jbGuardar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbSalir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(312, 312, 312)
                .addComponent(jlNotas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbGuardar)
                        .addGap(129, 129, 129)
                        .addComponent(jbSalir))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jlSeleccionar)
                        .addGap(136, 136, 136)
                        .addComponent(jcAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(162, 162, 162))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(80, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jlNotas)
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSeleccionar)
                    .addComponent(jcAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGuardar)
                    .addComponent(jbSalir))
                .addGap(51, 51, 51))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcAlumnoActionPerformed
        if(jcAlumno.getSelectedIndex() == -1){
            return;
        }
        Alumno alumno = (Alumno) jcAlumno.getSelectedItem();
        llenarLista(alumno);
        
    }//GEN-LAST:event_jcAlumnoActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        if(jcAlumno.getSelectedIndex() == -1){
            return;
        }
        Alumno alumno = (Alumno) jcAlumno.getSelectedItem();
        int idAlumno = alumno.getIdAlumno();
        
        if (jtaMateria.isEditing()) {
            jtaMateria.getCellEditor().stopCellEditing();
        }
 
        int numFilas = modelo.getRowCount();
        if(numFilas < 1){
            return;
        }
        
        InscripcionData inscripcionData = new InscripcionData();
        MateriaData materiaData = new MateriaData();
       
        for(int i = numFilas -1; i >= 0; i--){
            Integer idMateria = getCodigoTabla(i);
            Double nota = getNotaTabla(i);            
            inscripcionData.actualizarNota(idAlumno, idMateria, nota);
         }
        borrarLista();
        llenarLista(alumno);
    }//GEN-LAST:event_jbGuardarActionPerformed
//-----------------------------METODOS-------------------------------------    
    private void llenarCombo() {
        Alumno jcItemNoSeleccionado = new Alumno();
        jcItemNoSeleccionado.setIdAlumno(-1);
        jcAlumno.addItem(jcItemNoSeleccionado);
        jcAlumno.setSelectedItem(jcItemNoSeleccionado);

        AlumnoData alumnoData = new AlumnoData();
        List<Alumno> alumnos = alumnoData.listarAlumnos();

        for (Alumno alumno : alumnos) {
            jcAlumno.addItem(alumno);
        }

    }
    
    private void limpiarCampo() {
        if (jcAlumno != null) {
            jcAlumno.setSelectedIndex(-1);
        }

    }
    
    private void armarTabla() {
        modelo.addColumn("Código");
        modelo.addColumn("Nombre");
        modelo.addColumn("Nota");
        jtaMateria.setModel(modelo);
    }
    
    private void borrarLista() {
        int filas = modelo.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
        jtaMateria.repaint();
    }
    
    private void llenarLista(Alumno alumno){
        if(jcAlumno.getSelectedIndex() == -1){
            return;
        }
        int idAlumno = alumno.getIdAlumno();
        InscripcionData inscripcionData = new InscripcionData();
        List<Inscripcion> inscripcionesAlumno = inscripcionData.
                obtenerInscripcionesPorAlumno(idAlumno);
        llenarLista(inscripcionesAlumno);
    }
    
    private void llenarLista(List<Inscripcion> inscripciones) {
        borrarLista();
        System.out.println("llenarLista()");
        for (Inscripcion inscripcion : inscripciones) {
            System.out.println(inscripcion);
            Vector<Object> renglon = new Vector<>();
            renglon.add(inscripcion.getMateria().getIdMateria());
            renglon.add(inscripcion.getMateria().getNombre());
            renglon.add(inscripcion.getNota());

            modelo.addRow(renglon);
        }
        jtaMateria.repaint();
    }
    
        private Integer getCodigoTabla(int fila) {
        Object val = jtaMateria.getValueAt(fila, 0);
        if (val == null) {
            return null;
        }
        if (val instanceof Integer) {
            return (Integer) val;
        }
        return Integer.parseInt((String) val);
    }

    private Double getNotaTabla(int fila) {
        Object val = jtaMateria.getValueAt(fila, 2);
        if (val == null) {
            return null;
        }
        if (val instanceof Double) {
            return (Double) val;
        }
        
        return Double.parseDouble((String) val);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcAlumno;
    private javax.swing.JLabel jlNotas;
    private javax.swing.JLabel jlSeleccionar;
    private javax.swing.JTable jtaMateria;
    // End of variables declaration//GEN-END:variables
}
